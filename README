# Inspector Juve - Testability analysis for Ruby

Inspector Juve is static code Analysis Tool for Ruby code to detect testability flaws. Testability flaws are in most cases the result of misregarding object orientation and design principles like SOLID. Also dependencies of some piece of code adds testing effort and thus reduces testability. Futhermore plays the obeservability und controllability a big role for testability of software.

Inspector Juve results shows testability flaws at class level.


## Testability
[ISO SQuaRE 25000] describes says: [Testability is] the **ease** with which test criteria can be established for a system or component and **tests can be performed** to determine whether those criteria have been met.

Inspector Juve utilizes YARD, a documentation tool for ruby. The detection of Testability flaws itself is delegated to Juve *Detectors*.

### Dependencies
Every dependency adds testing effort. As Jungmayr describes in [Jungmayr2002]:

"A dependency of component A on component B is physical if component A can not be compiled (and linked) without component B [Lako96]. Examples of relationships that cause a physical dependency are:

* an operation of A uses an operation or an attribute of B
* A has an attribute of type B
* A inherits from B

A dependency of component A on component B is logical if a change to component B would require a change to component A in order to preserve overall correctness (e.g. component A makes assumptions about implicit conventions used in component B).
We focus on physical dependencies because they can be extracted automatically from source code."

### Many more testability metrics

* Lack of Cohesion
* Coupling
*

## Specialities for Ruby
Inspector Juve respects Ruby's *dynamic typing* by pointing out testability problem regarding this language feature. Dynamic typing also results in higher difficulty during static code analysis.
